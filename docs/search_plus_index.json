{"./":{"url":"./","title":"介绍","keywords":"","body":"「立己」：Ledge编程语言文档手册 在线文档: https://ledge-lang.github.io/zh/index.html Document Online: https://ledge-lang.github.io/en/index.html Markdown: https://github.com/ledge-lang/ledge-lang.github.io/blob/main/SUMMARY.md 介绍 Ledge(读音[ledʒ])编程语言是一个动态语言, 源代码文件扩展名.ll，编译文件扩展名.llc, 中文名叫「立己」。 英文名来自于单词Knowledge，字母K的下一个字母是L，同时Ledge也是Knowledge的一部分，表示掌握知识的方法与过程。 中文名出自成语立己达人: 夫仁者，己欲立而立人，己欲达而达人。 ——《论语 · 雍也》 运行方式 $ ./ledge --help Usge: ledge [option] ... [file | -] [arg] ... Options and arguments (and corresponding environment variables): -B : disable write .llc files; also LEDGEWRITEBYTECODE=x -engine : 'vm' default 'eval' is a ast-based interpreter 'vm' is a stack-based virtual machine file : program read from script file - : program read from stdin (default; interactive mode if a tty) arg ... : arguments passed to program in sys.argv[1:] -version : version info 默认使用栈式虚拟机引擎vm，可以选择解释器引擎eval，或没有源代码文件提供，则进入交互模式。 交互模式 $ ./ledge _ _ | | | | | | ___ __| | __ _ ___ | | / _ \\ / _` | / _` | / _ \\ | |____ | __/ | (_| | | (_| | | __/ |______| \\___| \\__,_| \\__, | \\___| __/ | |___/ Hello lesliezhu! This is the Ledge programming language! Version 0.0.4 by https://github.com/ledge-lang/ Feel free to type in commands, type `quit` to exit! >> let add = lambda(x,y){ return x + y; } Closure[0x600002d98e78] >> add(3,4) 7 >> quit Ledge, bye! 批处理模式 run.ll: let a = 3.1 + 2; print(a); let fib = lambda(x){ if(x == 0){ return 0; } elif(x == 1){ return 1; } else { return fib(x - 1) + fib(x - 2); } } print(fib); let b = fib(5); print(b); 运行源码文件(.ll): $ ./ledge run.ll Done: save compiled .llc file: run.llc 5.100000 Closure[0x600002324068] 5 运行字节码编译文件(.llc): $ ./ledge run.llc 5.100000 Closure[0x6000038280b8] 5 Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 10:56:58 "},"src/":{"url":"src/","title":"构建本地文档","keywords":"","body":"本地构建HTML文档 GitBook工具与Node环境: $ nvm use v16.0.0 $ node -v v16.0.0 $ npm -v 7.10.0 $ /usr/local/bin/gitbook -V CLI version: 2.3.2 GitBook version: 3.0.0 构建: $ git clone git@github.com:ledge-lang/ledge-lang.github.io.git $ cd ledge-lang.github.io $ /usr/local/bin/gitbook install $ /usr/local/bin/gitbook serve $ /usr/local/bin/gitbook serve en $ /usr/local/bin/gitbook serve zh or $ /usr/local/bin/gitbook build . docs $ /usr/local/bin/gitbook build en docs/en $ /usr/local/bin/gitbook build zh docs/zh or $ make $ make serve Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-12-27 21:39:32 "},"src/basic/basic_syntax.html":{"url":"src/basic/basic_syntax.html","title":"基本语法","keywords":"","body":"基本语法 注释符 #与//是注释符，该行后面内容视作注释内容被忽略 >> # this is a comment! >> // this is a comment! 行尾结束符 ;是行尾结束符，单行的时候可以忽略 let语句 let语句可以定义标志符、函数等，所有变量的定义都通过let语句, 变量名必须是字母或_开头，由字母、数字和_组成。 赋值语句 通过let定义的变量可以通过赋值语句直接赋值: let i = 0; i = 5; // OK j = 4; // error: undefiend variable j let name = \"你好, Ledge!\" def与lambda语句 def关键字用于定义命名函数 lambda关键字用于定义匿名函数。 return语句 return关键字用于返回值，有时候它可以省略，隐式返回。 return语句可以在任何地方执行，不局限于函数内部。 Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 12:10:45 "},"src/basic/data_type.html":{"url":"src/basic/data_type.html","title":"数据类型","keywords":"","body":"数据类型 Null: 空类型 Bool: 布尔变量 Integer：整数变量 Double：浮点数变量 String：字符串变量 Function：函数 List：数组或列表 Dict：哈希表或字典 Null空类型 null表示空: >> isNull([1,2,3][1]) false >> isNull([1,2,3][3]) true Bool布尔变量 true表示真，false表示假: >> true true >> false false >> !true false >> !false true >> !!true true Integer整数变量 >> let num = 1; 1 >> let num = 3 + 4; 7 >> let num = num + 5; 12 >> let a1 = 3 3 >> let a_1b = 4 4 >> a1 + a_1b 7 Double浮点数变量 >> 3.14159 3.141590 >> let a = 2 + 1.0 3.000000 >> let a = a - 1.5 1.500000 >> 10/2 5 >> 10/2.0 5.000000 >> 10/0 Woops! Executing bytecode failed: ERROR: error operator: / can not div 0 >> 10/0.0 Woops! Executing bytecode failed: ERROR: error operator: / can not div 0.000000 String字符串变量 单引号或双引号定义字符串，支持转义字符: >> let name = \"Ledge\"; \"Ledge\" >> let name = 'Ledge' \"Ledge\" >> type(name) \"STRING\" >> let name = \"Hello \" + 'Ledge!'; \"Hello Ledge!\" >> \"I ❤ Ledge!\" \"I ❤ Ledge!\" >> \"你好，\"+ \"Ledge!\" \"你好，Ledge!\" >> 'hello, my name is \\\"ledge\\\"' \"hello, my name is \\\"ledge\\\"\" Function函数 def关键字用于定义命名函数: >> def add(x, y){ x + y; } Closure[0x600002ae6688] >> add(3,4) 7 lambda关键字用于定义匿名函数: >> let add = lambda(x, y){ x + y; } Closure[0x6000019d40b8] >> add(3,4) 7 List列表 数组的元素可以是任何类型: >> let array = [1, \"hello\", true, !true, \"hello\" + \"world\"] [1, \"hello\", true, false, \"helloworld\"] >> type(array) \"LIST\" >> let a = array[0] 1 Dict字典 字典的key和value可以是任何类型: >> let map = {1: \"hello\", \"world\": true, false: 3+5} {false: 8, 1: \"hello\", \"world\": true} >> type(map) \"DICT\" >> map[false] 8 >> map[9] null Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2023-01-03 12:11:33 "},"src/basic/control_flow.html":{"url":"src/basic/control_flow.html","title":"流程控制","keywords":"","body":"流程控制 Return语句 If语句 While循环语句 For循环语句 Break语句 Continue语句 Return语句 隐式返回: if(true) { 10 } 显式返回: if(true) { return 10 } If语句 elif部分不是必须的，可以有多个elif: if(true) { 10 } if(true) { 10 } else { 20 } if(1 While循环与Continue、Break语句 let i = 0; while(i For循环与Continue、Break语句 使用局部变量: let i = 1; print(\"before for-loop:\", i) // let i = 0 会定义局部变量 for(let i=0 ;i 使用全局变量: let i = 1; print(\"before for-loop:\", i) // i 直接使用全局变量 for(;i Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2023-01-01 19:12:33 "},"src/basic/builtins.html":{"url":"src/basic/builtins.html","title":"内置函数","keywords":"","body":"Builtins内置函数 type isNull len first last rest push puts fibonacci delete type() >> type([1,2]) \"LIST\" >> type(type) \"BUILTIN\" isNull() >> isNull([1,2,3][1]) false >> isNull([1,2,3][3]) true len() >> len(\"hello\") 5 >> len([1,2,3]) 3 >> len(\"你好\") 2 first() >> first([1,2,3]) 1 last() >> last([1,2,3]) 3 rest() >> rest([1,2,3]) [2, 3] push() >> push([1,2,3], 4) [1, 2, 3, 4] puts() >> puts(\"Hello\", \"Ledge\") \"Hello\" \"Ledge\" null fibonacci() >> fibonacci(35) 9227465 delete() >> let a = 5 5 >> a 5 >> delete(a) >> a Woops! Compilation failed: ERROR: undefined variable a Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2023-01-02 00:23:58 "},"src/dev/":{"url":"src/dev/","title":"参与开发","keywords":"","body":"参与开发 Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-12-22 10:42:37 "},"src/dev/code_format.html":{"url":"src/dev/code_format.html","title":"代码风格","keywords":"","body":"代码风格 欢迎参与Ledge语言的开发，项目代码由clang-format保持风格统一，风格配置文件是: .clang-format 确认本地机器安装了clang-format，则可对文件进行风格转换: $ clang-format file.cpp # 只输出改变内容，但不修改文件 $ clang-format -i file.cpp # 直接修改文件 如果本地已经安装了git-clang-format，则可以通过git hook方式自动执行格式转换: $ chmod u+x scripts/git-pre-commit $ cp scripts/git-pre-commit .git/hooks/pre-commit 这样每次提交的时候会自动完成代码风格转换。 Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-12-22 10:42:25 "},"src/dev/dev_status.html":{"url":"src/dev/dev_status.html","title":"开发进度","keywords":"","body":"开发进度 Version 0.1.0 Let Statement Return Statement Assign Statement If Expression Break Statement Continue Statement While Loop Expression Missing Features UTF-8 print with format In Expression For Loop Expression If-Assign Expression Builtin Functions id(), type(), globals(), locals() Exception Debug Info Version 0.2.0 Class Type Module Import Module Extension by C/C++ Builtin Modules LLVM IR LLVM JIT Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-12-25 17:41:39 "},"src/resource/":{"url":"src/resource/","title":"资源参考","keywords":"","body":"资源参考 记录一些资源网站。 Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-12-23 23:10:26 "},"src/resource/links.html":{"url":"src/resource/links.html","title":"资源链接","keywords":"","body":"资源链接 关于GitBook使用: https://www.mapull.com/gitbook/comscore/ emoji小图标对照表: https://www.webfx.com/tools/emoji-cheat-sheet/ Copyright © LeslieZhu 2022 all right reserved，powered by Gitbook该文件修订时间： 2022-12-23 23:26:20 "}}